{"version":3,"sources":["core/utils.tsx","core/move.tsx","components/Square/Square.tsx","components/Board/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCurrentTurn","board","filter","value","undefined","length","turnIsX","turn","Move","currentSymbol","boardMap","symbolValues","X","O","computerAI","location","fns","canIWinThisTurn","bind","canYouWinNextTurn","preventTrap","applyDefaultStrategy","i","this","createBoard","source","push","rowNumber","start","slice","colNumber","1","2","3","map","num","startSquare","winArray","every","v","row","square","winner","evalArray","findEmptyLocation","otherSymbol","singles","dangerSquares","forEach","sort","arr","find","x","s","reduce","a","b","arr1","arr2","areEqual","idx","loc","index","getRow","getColumn","getDiagonal","Square","props","gameState","showWin","onSquareClick","className","id","disabled","isDisabled","onClick","ev","Board","players","score","newGameLabel","winAnimation","displayScore","join","Boolean","includes","onPlayerClick","key","toString","onNewGameClick","App","useState","setPlayers","setScore","setNewGameLabel","Array","setBoard","setGameState","setWinAnimation","setWinner","handleMove","useCallback","target","currentBoard","useEffect","currentTurn","move","evaluateWin","delay","Math","random","setTimeout","newScore","playerToSet","newPlayers","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94392527.chunk.js","sourcesContent":["import { BoardValue } from \"./types\";\r\n\r\nexport function getCurrentTurn(board: BoardValue[]): number {\r\n  return board.filter((value) => value !== undefined).length + 1;\r\n}\r\n\r\nexport function turnIsX(turn: number): boolean {\r\n  return turn % 2 !== 0;\r\n}\r\n","/**\r\n *    Board array index positions:\r\n *    0 | 1 | 2\r\n *    3 | 4 | 5\r\n *    6 | 7 | 8\r\n */\r\n\r\nimport {\r\n  Square,\r\n  SliceNum,\r\n  Row,\r\n  Column,\r\n  Diagonal,\r\n  Symbol,\r\n  BoardValue,\r\n  Winner,\r\n} from \"./types\";\r\n\r\nexport class Move {\r\n  public boardMap: Square[];\r\n  public currentSymbol: Symbol;\r\n  public turn: number = 1;\r\n\r\n  get otherSymbol(): Symbol {\r\n    return this.currentSymbol === \"X\" ? \"O\" : \"X\";\r\n  }\r\n\r\n  readonly symbolValues = {\r\n    X: 5,\r\n    O: 1,\r\n  };\r\n\r\n  constructor(board: BoardValue[], turn: number, currentSymbol: Symbol) {\r\n    this.boardMap = this.createBoard(board);\r\n    this.turn = turn;\r\n    this.currentSymbol = currentSymbol;\r\n  }\r\n\r\n  private createBoard(source: BoardValue[]): Square[] {\r\n    const boardMap = [];\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      boardMap.push({\r\n        location: i,\r\n        value: source[i],\r\n      });\r\n    }\r\n\r\n    return boardMap;\r\n  }\r\n\r\n  private getRow(rowNumber: SliceNum): Row {\r\n    const start = rowNumber * 3 - 3;\r\n    return this.boardMap.slice(start, start + 3) as Row;\r\n  }\r\n\r\n  private getColumn(colNumber: SliceNum): Column {\r\n    const columnMap = {\r\n      1: [0, 3, 6],\r\n      2: [1, 4, 7],\r\n      3: [2, 5, 8],\r\n    };\r\n\r\n    return columnMap[colNumber].map((num) => this.boardMap[num]) as Column;\r\n  }\r\n\r\n  private getDiagonal(startSquare: 0 | 2): Diagonal {\r\n    if (startSquare === 0) {\r\n      return [this.boardMap[0], this.boardMap[4], this.boardMap[8]];\r\n    } else {\r\n      return [this.boardMap[2], this.boardMap[4], this.boardMap[6]];\r\n    }\r\n  }\r\n\r\n  get sides() {\r\n    return [\r\n      this.boardMap[1],\r\n      this.boardMap[3],\r\n      this.boardMap[5],\r\n      this.boardMap[7],\r\n    ];\r\n  }\r\n\r\n  get winArray() {\r\n    return [\r\n      this.getRow(1),\r\n      this.getRow(2),\r\n      this.getRow(3),\r\n      this.getColumn(1),\r\n      this.getColumn(2),\r\n      this.getColumn(3),\r\n      this.getDiagonal(0),\r\n      this.getDiagonal(2),\r\n    ];\r\n  }\r\n\r\n  public computerAI = (): number => {\r\n    const fns = [  \r\n      this.canIWinThisTurn.bind(this),\r\n      this.canYouWinNextTurn.bind(this),\r\n      this.preventTrap.bind(this),\r\n      // this.applyHardCodedMoves.bind(this),\r\n      this.applyDefaultStrategy.bind(this),\r\n    ];\r\n\r\n    let location;\r\n    let i = 0;\r\n\r\n    while (!location && i < 4) {\r\n      location = fns[i++]();\r\n    }\r\n\r\n    return location as number;\r\n  };\r\n\r\n  public evaluateWin(): Winner | void {\r\n    for (let i = 0; i < this.winArray.length; i++) {\r\n      if (this.winArray[i].every((v) => v.value === \"X\")) {\r\n        return {\r\n          row: this.winArray[i].map((square) => square.location),\r\n          winner: \"X\",\r\n        };\r\n      } else if (this.winArray[i].every((v) => v.value === \"O\")) {\r\n        return {\r\n          row: this.winArray[i].map((square) => square.location),\r\n          winner: \"O\",\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  private canIWinThisTurn(): number | false {\r\n    for (let i = 0; i < this.winArray.length; i++) {\r\n      if (\r\n        this.evalArray(this.winArray[i]) ===\r\n        this.symbolValues[this.currentSymbol] * 2\r\n      ) {\r\n        return this.findEmptyLocation(this.winArray[i]);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private canYouWinNextTurn(): number | false {\r\n    for (let i = 0; i < this.winArray.length; i++) {\r\n      if (\r\n        this.evalArray(this.winArray[i]) ===\r\n        this.symbolValues[this.otherSymbol] * 2\r\n      ) {\r\n        return this.findEmptyLocation(this.winArray[i]);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private preventTrap(): number | false {\r\n    const singles: Row[] = this.winArray.filter((row: Row) => {\r\n      return this.evalArray(row) === this.symbolValues[this.otherSymbol];\r\n    });\r\n\r\n    let dangerSquares: number[] = [];\r\n\r\n    singles.forEach(row => {\r\n      row.forEach(square => {\r\n        if (square.value === undefined) {\r\n          dangerSquares.push(square.location);\r\n          dangerSquares.sort();\r\n        }\r\n      })\r\n    });\r\n\r\n\r\n    for (let i = 0; i < dangerSquares.length - 1; i++) {\r\n      if (dangerSquares[i] === dangerSquares[i + 1]) {\r\n        return dangerSquares[i];\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  private findEmptyLocation(arr: Row): number {\r\n    const square = arr.find((x) => x.value === undefined);\r\n    return square!.location;\r\n  }\r\n\r\n  private evalArray(arr: Row): number {\r\n    return arr\r\n      .map((s): number => {\r\n        if (!s.value) {\r\n          return 0;\r\n        } else {\r\n          return this.symbolValues[s.value as Symbol];\r\n        }\r\n      })\r\n      .reduce((a, b) => a + b);\r\n  }\r\n\r\n  private equalArrays(arr1: BoardValue[], arr2: BoardValue[]): boolean {\r\n    if (arr1.length !== arr2.length) return false;\r\n\r\n    let areEqual = true;\r\n\r\n    arr1.forEach((num, idx) => {\r\n      if (num !== arr2[idx]) {\r\n        areEqual = false;\r\n      }\r\n    });\r\n\r\n    return areEqual;\r\n  }\r\n\r\n  // private applyHardCodedMoves(): number | false {\r\n  //   const [row1, row2, row3, col1, col2, col3, diag1, diag2] = this.winArray;\r\n\r\n  //   if (\r\n  //     this.turn === 5 &&\r\n  //     this.boardMap[1].value === \"O\" &&\r\n  //     this.boardMap[6].value === undefined\r\n  //   ) {\r\n  //     return 6;\r\n  //   }\r\n  //   if (\r\n  //     this.turn === 4 &&\r\n  //     (this.equalArrays(\r\n  //       diag1.map((s) => s.value),\r\n  //       [\"X\", \"O\", \"X\"]\r\n  //     ) ||\r\n  //       this.equalArrays(\r\n  //         diag2.map((s) => s.value),\r\n  //         [\"X\", \"O\", \"X\"]\r\n  //       ))\r\n  //   ) {\r\n  //     return 1;\r\n  //   }\r\n\r\n  //   if (\r\n  //     this.turn === 4 &&\r\n  //     this.evalArray(row1) === 6 &&\r\n  //     this.evalArray(row3) === 5\r\n  //   ) {\r\n  //     return 8;\r\n  //   }\r\n  //   if (\r\n  //     this.turn === 4 &&\r\n  //     this.evalArray(row1) === 5 &&\r\n  //     this.evalArray(row3) === 6\r\n  //   ) {\r\n  //     return 0;\r\n  //   }\r\n  //   if (\r\n  //     this.turn === 4 &&\r\n  //     this.evalArray(col1) === 6 &&\r\n  //     this.evalArray(col3) === 5\r\n  //   ) {\r\n  //     return 2;\r\n  //   }\r\n  //   if (\r\n  //     this.turn === 4 &&\r\n  //     this.evalArray(col1) === 5 &&\r\n  //     this.evalArray(col3) === 6\r\n  //   ) {\r\n  //     return 6;\r\n  //   }\r\n\r\n  //   const sideValues = this.sides.map((side) => side.value);\r\n\r\n  //   if (\r\n  //     this.turn === 4 &&\r\n  //     (this.equalArrays(sideValues, [\"O\", undefined, \"X\", \"X\"]) ||\r\n  //       this.equalArrays(sideValues, [\"O\", \"X\", undefined, \"X\"]) ||\r\n  //       this.equalArrays(sideValues, [\"X\", \"X\", \"O\", undefined]) ||\r\n  //       this.equalArrays(sideValues, [undefined, \"X\", \"O\", \"X\"]))\r\n  //   ) {\r\n  //     return 6;\r\n  //   }\r\n\r\n  //   if (\r\n  //     this.turn === 4 &&\r\n  //     (this.equalArrays(sideValues, [\"X\", \"O\", \"X\", undefined]) ||\r\n  //       this.equalArrays(sideValues, [undefined, \"O\", \"X\", \"X\"]) ||\r\n  //       this.equalArrays(sideValues, [\"X\", undefined, \"X\", \"O\"]) ||\r\n  //       this.equalArrays(sideValues, [\"X\", \"X\", undefined, \"O\"]))\r\n  //   ) {\r\n  //     return 2;\r\n  //   }\r\n\r\n  //   if (this.turn === 2) {\r\n  //     for (let i in this.sides) {\r\n  //       if (this.sides[i].value === \"X\") {\r\n  //         // pick opposite side\r\n  //         return 8 - this.sides[i].location;\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   return false;\r\n  // }\r\n\r\n  private applyDefaultStrategy(): number | false {\r\n    const strategy = [4, 0, 2, 6, 8, 1, 3, 5, 7]; // default order of play\r\n\r\n    const loc = strategy.find(\r\n      (index) => this.boardMap[index].value === undefined\r\n    );\r\n\r\n    if (loc !== undefined) {\r\n      return loc;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { BoardValue, GameState } from \"../../core/types\";\r\n\r\ninterface Props {\r\n  value: BoardValue;\r\n  gameState: GameState;\r\n  showWin: boolean;\r\n  index: string;\r\n  onSquareClick: (ev: any, index: string) => void;\r\n}\r\n\r\nconst Square = (props: Props) => {\r\n  const { value, gameState, showWin, onSquareClick, index } = props;\r\n\r\n  const isDisabled = (value: BoardValue): boolean => {\r\n    return value !== undefined || gameState === \"complete\";\r\n  };\r\n\r\n  return (\r\n    <button className={`${showWin ? \"winAnimation\" : \"\"}`} id={value} disabled={isDisabled(value)} onClick={(ev) => onSquareClick(ev, index)}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport \"./Board.scss\";\r\nimport { getCurrentTurn } from \"../../core/utils\";\r\nimport Square from \"../Square/Square\";\r\nimport { Players, RestartLabel, GameState, Score, BoardValue } from \"../../core/types\";\r\n\r\ninterface Props {\r\n  players: Players;\r\n  score: Score;\r\n  board: BoardValue[];\r\n  newGameLabel: RestartLabel;\r\n  gameState: GameState;\r\n  winAnimation: number[] | undefined;\r\n  onNewGameClick: () => void;\r\n  onPlayerClick: (id: number) => void;\r\n  onSquareClick: (ev: any, index: string) => void;\r\n}\r\n\r\nconst Board = (props: Props) => {\r\n  const {\r\n    players,\r\n    score,\r\n    board,\r\n    newGameLabel,\r\n    gameState,\r\n    winAnimation\r\n  } = props;\r\n  const displayScore = score.join(\" : \");\r\n  const turn = getCurrentTurn(board);\r\n\r\n  const showWin = (index: number): boolean => {\r\n    return Boolean(winAnimation && winAnimation.includes(index));\r\n  }\r\n\r\n  return (\r\n    <div id=\"main\">\r\n      <h1>ARTIFICAL INTELLIGENCE</h1>\r\n\r\n      <button\r\n        className={`playerSelect ${turn % 2 !== 0 ? \"underline\" : \"\"}`}\r\n        id=\"player1\"\r\n        onClick={() => props.onPlayerClick(0)}\r\n      >\r\n        {players[0]} - X\r\n      </button>\r\n\r\n      <div id=\"scoreBoard\">{displayScore}</div>\r\n      <button\r\n        className={`playerSelect ${turn % 2 === 0 ? \"underline\" : \"\"}`}\r\n        id=\"player2\"\r\n        onClick={() => props.onPlayerClick(1)}\r\n      >\r\n        O - {players[1]}\r\n      </button>\r\n\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            {[0,1,2].map(v => (\r\n              <td key={v}>\r\n                <Square value={board[v]} index={v.toString()} gameState={gameState} showWin={showWin(v)} onSquareClick={props.onSquareClick}/>\r\n              </td>\r\n            ))}\r\n          </tr>\r\n\r\n          <tr>\r\n          {[3,4,5].map(v => (\r\n              <td key={v}>\r\n                <Square value={board[v]} index={v.toString()} gameState={gameState} showWin={showWin(v)} onSquareClick={props.onSquareClick}/>\r\n              </td>\r\n            ))}\r\n          </tr>\r\n\r\n          <tr>\r\n          {[6,7,8].map(v => (\r\n              <td key={v}>\r\n                <Square value={board[v]} index={v.toString()} gameState={gameState} showWin={showWin(v)} onSquareClick={props.onSquareClick}/>\r\n              </td>\r\n            ))}\r\n          </tr>\r\n\r\n        </tbody>\r\n      </table>\r\n\r\n      <button className=\"newGame\" onClick={props.onNewGameClick}>\r\n        {newGameLabel}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./App.scss\";\n\nimport { Players, Score, RestartLabel, BoardValue, Symbol, GameState, Winner } from \"./core/types\";\nimport { getCurrentTurn, turnIsX } from \"./core/utils\";\nimport { Move } from \"./core/move\";\nimport Board from \"./components/Board/Board\";\n\nfunction App() {\n  const [players, setPlayers] = useState<Players>([\"Human\", \"Skynet\"]);\n  const [score, setScore] = useState<Score>([0, 0]);\n  const [newGameLabel, setNewGameLabel] = useState<RestartLabel>(\"New game\");\n\n  const [board, setBoard] = useState<BoardValue[]>(new Array(9));\n  const [gameState, setGameState] = useState<GameState>(\"in progress\");\n  const [winAnimation, setWinAnimation] = useState<number[] | undefined>();\n  const [winner, setWinner] = useState<Winner | undefined>();\n\n  const handleMove = useCallback(\n    (target) => {\n      if (target.id) {\n        const currentTurn = getCurrentTurn(board);\n        const currentSymbol: BoardValue = turnIsX(currentTurn) ? \"X\" : \"O\";\n        const currentBoard = [...board];\n        currentBoard[target.id] = currentSymbol;\n\n        setBoard(currentBoard);\n      }\n    },\n    [board]\n  );\n\n  useEffect(() => {\n    const currentTurn = getCurrentTurn(board);\n    const currentSymbol: Symbol = turnIsX(currentTurn) ? \"X\" : \"O\";\n    const move = new Move(board, currentTurn, currentSymbol);\n    const winner = move.evaluateWin();\n\n    if (winner || currentTurn > 9) {\n      setWinner(winner as Winner);\n    } else if (\n      (players[0] === \"Skynet\" && currentSymbol === \"X\") ||\n      (players[1] === \"Skynet\" && currentSymbol === \"O\")\n    ) {\n      const delay = Math.random() * 1000;\n      setTimeout(() => {\n        const location = move.computerAI();\n  \n        if (location !== undefined) {\n          handleMove({ id: location.toString() });\n        }\n      }, delay);\n      \n    }\n  }, [board, players, handleMove]);\n\n  useEffect(() => {\n    if (winner && gameState !== 'complete') {\n      setNewGameLabel('Play again?');\n      setGameState('complete');\n\n      if (winner) {\n        const newScore = [...score];\n        if (winner.winner === 'X') {\n          newScore[0]++;\n        } else {\n          newScore[1]++;\n        }\n        setScore(newScore as Score);\n        setWinAnimation(winner.row);\n      }\n    }\n\n  }, [winner, score, gameState]);\n\n  const onSquareClick = (ev: any, index: string) => {\n    handleMove({id: index})\n  }\n\n  const handlePlayerClick = (idx: number) => {\n    const playerToSet = players[idx];\n\n    const newPlayers = [...players] as Players;\n    newPlayers[idx] = playerToSet === \"Human\" ? \"Skynet\" : \"Human\";\n    setPlayers(newPlayers);\n    setScore([0, 0]);\n  };\n\n  const handleNewGameClick = () => {\n    setBoard(new Array(9));\n    setGameState('in progress');\n    setWinAnimation(undefined);\n    setWinner(undefined);\n    setNewGameLabel(\"New game\");\n  };\n\n  \n\n  return (\n    <div className=\"container\">\n      <Board\n        players={players}\n        score={score}\n        board={board}\n        gameState={gameState}\n        newGameLabel={newGameLabel}\n        winAnimation={winAnimation}\n        onNewGameClick={handleNewGameClick}\n        onPlayerClick={handlePlayerClick}\n        onSquareClick={onSquareClick}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}